# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: bilibili/app/interfaces/v1/search.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import bilibili.app.interfaces.v1.search_pb2


class SearchBase(abc.ABC):

    @abc.abstractmethod
    async def Suggest3(self, stream: 'grpclib.server.Stream[bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req, bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply]') -> None:
        pass

    @abc.abstractmethod
    async def DefaultWords(self, stream: 'grpclib.server.Stream[bilibili.app.interfaces.v1.search_pb2.DefaultWordsReq, bilibili.app.interfaces.v1.search_pb2.DefaultWordsReply]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/bilibili.app.interface.v1.Search/Suggest3': grpclib.const.Handler(
                self.Suggest3,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req,
                bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply,
            ),
            '/bilibili.app.interface.v1.Search/DefaultWords': grpclib.const.Handler(
                self.DefaultWords,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.app.interfaces.v1.search_pb2.DefaultWordsReq,
                bilibili.app.interfaces.v1.search_pb2.DefaultWordsReply,
            ),
        }


class SearchStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Suggest3 = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.app.interface.v1.Search/Suggest3',
            bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req,
            bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply,
        )
        self.DefaultWords = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.app.interface.v1.Search/DefaultWords',
            bilibili.app.interfaces.v1.search_pb2.DefaultWordsReq,
            bilibili.app.interfaces.v1.search_pb2.DefaultWordsReply,
        )


class SearchTestBase(abc.ABC):

    @abc.abstractmethod
    async def NotExist(self, stream: 'grpclib.server.Stream[bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req, bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/bilibili.app.interface.v1.SearchTest/NotExist': grpclib.const.Handler(
                self.NotExist,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req,
                bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply,
            ),
        }


class SearchTestStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.NotExist = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.app.interface.v1.SearchTest/NotExist',
            bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Req,
            bilibili.app.interfaces.v1.search_pb2.SuggestionResult3Reply,
        )
