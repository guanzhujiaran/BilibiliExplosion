# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: pgc/gateway/vega/v1/vega.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.any_pb2
import google.protobuf.empty_pb2
import pgc.gateway.vega.v1.vega_pb2


class VegaBase(abc.ABC):

    @abc.abstractmethod
    async def CreateTunnel(self, stream: 'grpclib.server.Stream[pgc.gateway.vega.v1.vega_pb2.VegaFrame, pgc.gateway.vega.v1.vega_pb2.VegaFrame]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/pgc.gateway.vega.v1.Vega/CreateTunnel': grpclib.const.Handler(
                self.CreateTunnel,
                grpclib.const.Cardinality.UNARY_UNARY,
                pgc.gateway.vega.v1.vega_pb2.VegaFrame,
                pgc.gateway.vega.v1.vega_pb2.VegaFrame,
            ),
        }


class VegaStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateTunnel = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pgc.gateway.vega.v1.Vega/CreateTunnel',
            pgc.gateway.vega.v1.vega_pb2.VegaFrame,
            pgc.gateway.vega.v1.vega_pb2.VegaFrame,
        )


class VegaFrameDocBase(abc.ABC):

    @abc.abstractmethod
    async def Auth(self, stream: 'grpclib.server.Stream[pgc.gateway.vega.v1.vega_pb2.AuthReq, pgc.gateway.vega.v1.vega_pb2.AuthResp]') -> None:
        pass

    @abc.abstractmethod
    async def Heartbeat(self, stream: 'grpclib.server.Stream[pgc.gateway.vega.v1.vega_pb2.HeartbeatReq, pgc.gateway.vega.v1.vega_pb2.HeartbeatResp]') -> None:
        pass

    @abc.abstractmethod
    async def MessageAck(self, stream: 'grpclib.server.Stream[pgc.gateway.vega.v1.vega_pb2.MessageAckReq, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def Subscribe(self, stream: 'grpclib.server.Stream[pgc.gateway.vega.v1.vega_pb2.SubscribeReq, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/pgc.gateway.vega.v1.VegaFrameDoc/Auth': grpclib.const.Handler(
                self.Auth,
                grpclib.const.Cardinality.UNARY_UNARY,
                pgc.gateway.vega.v1.vega_pb2.AuthReq,
                pgc.gateway.vega.v1.vega_pb2.AuthResp,
            ),
            '/pgc.gateway.vega.v1.VegaFrameDoc/Heartbeat': grpclib.const.Handler(
                self.Heartbeat,
                grpclib.const.Cardinality.UNARY_UNARY,
                pgc.gateway.vega.v1.vega_pb2.HeartbeatReq,
                pgc.gateway.vega.v1.vega_pb2.HeartbeatResp,
            ),
            '/pgc.gateway.vega.v1.VegaFrameDoc/MessageAck': grpclib.const.Handler(
                self.MessageAck,
                grpclib.const.Cardinality.UNARY_UNARY,
                pgc.gateway.vega.v1.vega_pb2.MessageAckReq,
                google.protobuf.empty_pb2.Empty,
            ),
            '/pgc.gateway.vega.v1.VegaFrameDoc/Subscribe': grpclib.const.Handler(
                self.Subscribe,
                grpclib.const.Cardinality.UNARY_UNARY,
                pgc.gateway.vega.v1.vega_pb2.SubscribeReq,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class VegaFrameDocStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Auth = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pgc.gateway.vega.v1.VegaFrameDoc/Auth',
            pgc.gateway.vega.v1.vega_pb2.AuthReq,
            pgc.gateway.vega.v1.vega_pb2.AuthResp,
        )
        self.Heartbeat = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pgc.gateway.vega.v1.VegaFrameDoc/Heartbeat',
            pgc.gateway.vega.v1.vega_pb2.HeartbeatReq,
            pgc.gateway.vega.v1.vega_pb2.HeartbeatResp,
        )
        self.MessageAck = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pgc.gateway.vega.v1.VegaFrameDoc/MessageAck',
            pgc.gateway.vega.v1.vega_pb2.MessageAckReq,
            google.protobuf.empty_pb2.Empty,
        )
        self.Subscribe = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pgc.gateway.vega.v1.VegaFrameDoc/Subscribe',
            pgc.gateway.vega.v1.vega_pb2.SubscribeReq,
            google.protobuf.empty_pb2.Empty,
        )
