# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: bilibili/api/probe/v1/probe.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import bilibili.api.probe.v1.probe_pb2


class ProbeBase(abc.ABC):

    @abc.abstractmethod
    async def TestCode(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.CodeReq, bilibili.api.probe.v1.probe_pb2.CodeReply]') -> None:
        pass

    @abc.abstractmethod
    async def TestReq(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.ProbeReq, bilibili.api.probe.v1.probe_pb2.ProbeReply]') -> None:
        pass

    @abc.abstractmethod
    async def TestStream(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.ProbeStreamReq, bilibili.api.probe.v1.probe_pb2.ProbeStreamReply]') -> None:
        pass

    @abc.abstractmethod
    async def TestSub(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.ProbeSubReq, bilibili.api.probe.v1.probe_pb2.ProbeSubReply]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/bilibili.api.probe.v1.Probe/TestCode': grpclib.const.Handler(
                self.TestCode,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.CodeReq,
                bilibili.api.probe.v1.probe_pb2.CodeReply,
            ),
            '/bilibili.api.probe.v1.Probe/TestReq': grpclib.const.Handler(
                self.TestReq,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.ProbeReq,
                bilibili.api.probe.v1.probe_pb2.ProbeReply,
            ),
            '/bilibili.api.probe.v1.Probe/TestStream': grpclib.const.Handler(
                self.TestStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.ProbeStreamReq,
                bilibili.api.probe.v1.probe_pb2.ProbeStreamReply,
            ),
            '/bilibili.api.probe.v1.Probe/TestSub': grpclib.const.Handler(
                self.TestSub,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.ProbeSubReq,
                bilibili.api.probe.v1.probe_pb2.ProbeSubReply,
            ),
        }


class ProbeStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.TestCode = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.Probe/TestCode',
            bilibili.api.probe.v1.probe_pb2.CodeReq,
            bilibili.api.probe.v1.probe_pb2.CodeReply,
        )
        self.TestReq = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.Probe/TestReq',
            bilibili.api.probe.v1.probe_pb2.ProbeReq,
            bilibili.api.probe.v1.probe_pb2.ProbeReply,
        )
        self.TestStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.Probe/TestStream',
            bilibili.api.probe.v1.probe_pb2.ProbeStreamReq,
            bilibili.api.probe.v1.probe_pb2.ProbeStreamReply,
        )
        self.TestSub = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.Probe/TestSub',
            bilibili.api.probe.v1.probe_pb2.ProbeSubReq,
            bilibili.api.probe.v1.probe_pb2.ProbeSubReply,
        )


class ProbeServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Echo(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.SimpleMessage, bilibili.api.probe.v1.probe_pb2.SimpleMessage]') -> None:
        pass

    @abc.abstractmethod
    async def EchoBody(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.SimpleMessage, bilibili.api.probe.v1.probe_pb2.SimpleMessage]') -> None:
        pass

    @abc.abstractmethod
    async def EchoDelete(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.SimpleMessage, bilibili.api.probe.v1.probe_pb2.SimpleMessage]') -> None:
        pass

    @abc.abstractmethod
    async def EchoError(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.ErrorMessage, bilibili.api.probe.v1.probe_pb2.ErrorMessage]') -> None:
        pass

    @abc.abstractmethod
    async def EchoPatch(self, stream: 'grpclib.server.Stream[bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate, bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/bilibili.api.probe.v1.ProbeService/Echo': grpclib.const.Handler(
                self.Echo,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            ),
            '/bilibili.api.probe.v1.ProbeService/EchoBody': grpclib.const.Handler(
                self.EchoBody,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            ),
            '/bilibili.api.probe.v1.ProbeService/EchoDelete': grpclib.const.Handler(
                self.EchoDelete,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
                bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            ),
            '/bilibili.api.probe.v1.ProbeService/EchoError': grpclib.const.Handler(
                self.EchoError,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.ErrorMessage,
                bilibili.api.probe.v1.probe_pb2.ErrorMessage,
            ),
            '/bilibili.api.probe.v1.ProbeService/EchoPatch': grpclib.const.Handler(
                self.EchoPatch,
                grpclib.const.Cardinality.UNARY_UNARY,
                bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate,
                bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate,
            ),
        }


class ProbeServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Echo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.ProbeService/Echo',
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
        )
        self.EchoBody = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.ProbeService/EchoBody',
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
        )
        self.EchoDelete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.ProbeService/EchoDelete',
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
            bilibili.api.probe.v1.probe_pb2.SimpleMessage,
        )
        self.EchoError = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.ProbeService/EchoError',
            bilibili.api.probe.v1.probe_pb2.ErrorMessage,
            bilibili.api.probe.v1.probe_pb2.ErrorMessage,
        )
        self.EchoPatch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/bilibili.api.probe.v1.ProbeService/EchoPatch',
            bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate,
            bilibili.api.probe.v1.probe_pb2.DynamicMessageUpdate,
        )
